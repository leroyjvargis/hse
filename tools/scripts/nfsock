#!/usr/bin/env python3

# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2020-2021 Micron Technology, Inc. All rights reserved.

import re
import sys
import argparse
import subprocess as sp
import yaml
import json
import pathlib
import signal


def make_argparser() -> argparse.ArgumentParser:
    argparser = argparse.ArgumentParser(
        description="""
Convert NF data tree from YAML to a more readable form.
""",
        epilog="""
""",
    )
    argparser.add_argument(
        "-C",
        "--home",
        help="Home directory",
        type=pathlib.Path,
        default=pathlib.Path.cwd(),
    )
    argparser.add_argument(
        "-c", dest="config", help="show config (rparams) only", action="store_true", default=False
    )
    argparser.add_argument(
        "-d",
        dest="describe",
        help="show descriptions (for perf counters)",
        action="store_true",
    )
    argparser.add_argument(
        "-e", dest="event", help="show event counters only", action="store_true", default=False
    )
    argparser.add_argument(
        "-P", dest="perfc_is_on", help="show disabled perf counters", action="store_false", default=True
    )
    argparser.add_argument(
        "-p", dest="perfc", help="show perf counters only", action="store_true", default=False
    )
    argparser.add_argument(
        "-r", dest="raw", help="show raw output (yaml)", action="store_true"
    )
    argparser.add_argument(
        "-Z",
        dest="hideval",
        help="do not show perf counters with value of zero or one",
        action="store_const",
        const=2,
        default=0
    )
    argparser.add_argument(
        "-z",
        dest="hideval",
        help="do not show perf counters with value of zero",
        action="store_const",
        const=1,
        default=0
    )
    return argparser


def get_error_counters(yml):
    tag = "events"
    if tag not in yml:
        print("Cannot find '{}' element in yaml output".format(tag), file=sys.stderr)
        exit(1)

    headers = ["#module", "file:line", "function", "count", "type", "sev", "time"]
    alignments = ["<", "<", "<", ">", "<", ">", "<"]

    lens = [len(x) for x in headers]

    entries = []
    for ev in yml[tag]:
        m = re.match(r"/data/events/(.*?)/(.*?)/(.*)$", ev["path"])
        if m:
            module = "kvdb"
            filename = m.group(1) + ":" + m.group(3)
            func = m.group(2)
        else:
            module = "unknown"
            filename = ev["path"]
            func = ""

        if ev["odometer"] >= op.hideval:
            row = [
                module,
                filename,
                func,
                str(ev["odometer"]),
                str(ev["source"]),
                str(ev["level"]),
                str(ev["odometer timestamp"]),
            ]
            lens = [max(x, len(y)) for x, y in zip(lens, row)]
            entries.append(row)
            pass

        pass

    formats = [
        "{:" + str(align) + str(width) + "}" for align, width in zip(alignments, lens)
    ]
    return (headers, entries, formats)


def get_perfc(yml):
    global op

    columns = []
    columns.append(["#name", "<"])
    columns.append(["type", "<"])
    columns.append(["units", "<"])
    columns.append(["value1", ">"])
    columns.append(["value2", ">"])
    columns.append(["value3", ">"])
    if op.describe:
        columns.append(["description", "<"])
        pass

    headers, alignments = zip(*columns)

    lens = [len(x) for x in headers]

    entries = []
    for pc in yml["perfc"]:
        m = re.match(r"/data/perfc/(.*)$", pc["path"])
        if m:
            path = m.group(1)
        else:
            path = ev["path"]
            pass

        for counter in pc["counters"]:
            if op.perfc_is_on == True and counter["is_on"] == 0:
                continue

            value1 = "-"
            value2 = "-"
            value3 = "-"
            total = 0

            if counter["type"] == "Basic":
                value1 = counter["value"]
                total = value1
            elif counter["type"] == "Rate":
                value1 = counter["rate"]
                value2 = counter["curr"]
                # value3 = counter['dt_ns']  # not very useful
                total = value1
            elif counter["type"] == "Latency":
                value1 = counter["average"]
                value2 = counter["min"]
                value3 = counter["max"]
                total = value1
            elif counter["type"] == "Distribution":
                value1 = counter["average"]
                total = value1
                pass

            if total >= op.hideval:
                row = [
                    path,
                    counter["type"],
                    counter["header"],
                    str(value1),
                    str(value2),
                    str(value3),
                ]
                if op.describe:
                    row.append(counter["description"])
                    pass

                lens = [max(x, len(y)) for x, y in zip(lens, row)]
                entries.append(row)
                pass

            pass
        pass

    formats = [
        "{:" + str(align) + str(width) + "}" for align, width in zip(alignments, lens)
    ]
    return (headers, entries, formats)


def get_config(yml):

    # print yaml.dump(yml['config'])
    tag = "config"
    if tag not in yml:
        print("Cannot find '{}' element in yaml output".format(tag), file=sys.stderr)
        exit(1)

    headers = ["#module", "Unit", "Param", "Current", "Default", "Writable"]
    alignments = ["<", "<", "<", ">", ">", ">"]

    lens = [len(x) for x in headers]

    entries = []

    for ev in yml[tag]:
        # print yaml.dump(ev)
        m = re.match(r"(.*?)/(.*)/(.*?)$", ev["path"])
        if m:
            module = m.group(1)
            unit = m.group(2)
            param = m.group(3)
            pass

        row = [
            module,
            unit,
            param,
            str(ev["current"]),
            str(ev["default"]),
            str(ev["writable"]),
        ]
        lens = [max(x, len(y)) for x, y in zip(lens, row)]
        entries.append(row)

    formats = [
        "{:" + str(align) + str(width) + "}" for align, width in zip(alignments, lens)
    ]
    return (headers, entries, formats)


def show(yml):
    if op.perfc:
        headers, entries, formats = get_perfc(yml)
        fmt = "  ".join(formats)
        print(fmt.format(*headers))
        for ent in entries:
            print(fmt.format(*ent))

    if op.perfc and op.event:
        print("")

    if op.event:
        headers, entries, formats = get_error_counters(yml)
        fmt = "  ".join(formats)
        print(fmt.format(*headers))
        for ent in entries:
            print(fmt.format(*ent))

    if op.config:
        headers, entries, formats = get_config(yml)
        fmt = "  ".join(formats)
        print(fmt.format(*headers))
        for ent in entries:
            print(fmt.format(*ent))

    return


def main():
    argparser = make_argparser()

    global op
    op = argparser.parse_args()

    with open(op.home / "kvdb.pid", "r") as pfh:
        content = json.load(pfh)
        sock: str = content["socket"]["path"]

    url = "http://localhost/data"

    if op.perfc:
        url = "http://localhost/data/perfc"
    elif op.event:
        url = "http://localhost/data/events"
    elif op.config:
        url = "http://localhost/data/config"

    curl_cmd = ["curl", "-s", "--noproxy", "localhost", "--unix-socket", sock, url]
    try:
        buf = sp.check_output(curl_cmd)
    except sp.CalledProcessError:
        print(f"ERROR: cURL command failed:\n\t{' '.join(curl_cmd)}")
        exit(1)

    if op.raw:
        print(buf.decode())
    else:
        ybuf = yaml.safe_load(buf)
        show(ybuf)
        pass

    return 0


if __name__ == "__main__":
    try:
        exit(main())
    except KeyboardInterrupt:
        sys.exit(128 + signal.SIGINT)
